@page "/shift/create"
@page "/shift/edit/{id:int}"

@attribute [Authorize]
@inject HttpClient Http

@inject IShiftService ShiftService
@inject IPatientService PacienteService
@inject IDoctorService DoctorService
@inject ISnackbar Snackbar


@inject NavigationManager NavigationManager


@Message

@if (shift == null)
{
    <p>Cargando ....</p>
}
else
{
    <EditForm Model="shift" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <div class="card">
            <h5 class="card-header"> Datos del Turno </h5>
            <div class="card-body">
                <div class="container">

                    <div class="row">

                        <div class="col-md-6 mb-3">
                            <MudSelect Label="Paciente" @bind-Value="@shift.PatientId" Placeholder="Seleccione un paciente"
                                       AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
                                @foreach (var patient in patients)
                                    {
                                    <MudSelectItem Value="@(patient.Id)">@(patient.FullName)</MudSelectItem>
                                    }
                            </MudSelect>
                            <ValidationMessage For="@( () => shift.PatientId )" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <MudSelect Label="Doctor" @bind-Value="@shift.DoctorId" Placeholder="Seleccione un doctor"
                                       AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary">
                                @foreach (var doctor in doctors)
                                    {
                                    <MudSelectItem Value="@(doctor.Id)">@(doctor.FullName)</MudSelectItem>
                                    }
                            </MudSelect>

                            <ValidationMessage For="@( () => shift.DoctorId )" />
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-md-6 mb-3">
                            <InputDate class="form-control" @bind-Value="@shift.ShiftDate"></InputDate>                            
                            <ValidationMessage For="@( () => shift.ShiftDate )" />
                        </div>
                    </div>

                    <div class="row">

                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-success" value="Guardar" />
                            <input type="button" class="btn btn-secondary" value="Cancelar" @onclick="NavigateHome" />
                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </EditForm>

}

@code {
    public Shift shift;
    public IEnumerable<Patient> patients;
    public IEnumerable<Doctor> doctors;
    public string Message;    

    [Parameter]
    public int id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            patients = await PacienteService.GetAll() == null ? new List<Patient>() : await PacienteService.GetAll();
            doctors = await DoctorService.GetAll() == null ? new List<Doctor>() : await DoctorService.GetAll();

            if (id == 0)
                shift = new Shift()
                {
                    PatientId = patients.FirstOrDefault().Id,
                    DoctorId = doctors.FirstOrDefault().Id,
                    ShiftDate = DateTime.Today
                };
            else
            {
                shift = await ShiftService.GetDetails(id);                
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    protected async Task Save()
    {
        bool status = await ShiftService.SaveShift(shift);

        if (status)
        {

            Snackbar.Add("Turno insertado", Severity.Success, a => a.VisibleStateDuration = 200);

            NavigateHome();

        }
        else
        {            
            Snackbar.Add("El paciente ya tiene un turno asignado en la fecha seleccionada.", Severity.Error);

        }
    }

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/shift/list");
    }
}