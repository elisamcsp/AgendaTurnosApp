@page "/shift/list"

@attribute [Authorize]

@inject IShiftService ShiftService
@inject IPatientService PatientService
@inject IDoctorService DoctorService

@inject NavigationManager NavigationManager

@if (activateAddShift) { 
    <MudButton OnClick="NavigateToAddShift" Color="Color.Secondary"> + Añadir turno</MudButton>
}

@Message

@if (shifts != null)
{

    <MudTable Items="@shifts" Hover="true" Striped="true"
              Breakpoint="Breakpoint.Sm"
              Filter="new Func<Shift,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedShift"
              SortLabel="Ordenar por">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Listado de Turnos</MudText>
            <MudToolBarSpacer></MudToolBarSpacer>
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar" FullWidth="false" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Shift, object>(x=>x.PatientFullName)">Paciente</MudTableSortLabel> </MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Shift, object>(x=>x.DoctorFullName)">Doctor</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Shift, object>(x=>x.ShiftDate)">Fecha</MudTableSortLabel> </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="ShiftContext">
            <MudTd DataLabel="PatientFullName">@ShiftContext.PatientFullName</MudTd>
            <MudTd DataLabel="DoctorFullName">@ShiftContext.DoctorFullName</MudTd>
            <MudTd DataLabel="ShiftDate">@ShiftContext.ShiftDate.Date.ToShortDateString()</MudTd>
            <MudTd>
                <MudIconButton OnClick="@(() => NavigateToEditShift(ShiftContext.Id))"
                               Icon="@Icons.Material.Filled.Edit" aria-label="edit"></MudIconButton>
                <MudIconButton OnClick="@(() => NavigateToDeleteShift(ShiftContext.Id))"
                               Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>

            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <p>Cargando ....</p>
}

@code {
    public IEnumerable<Shift> shifts;
    public bool activateAddShift = false;

    private Shift selectedShift = null;
    private HashSet<Shift> selectedItems = new HashSet<Shift>();

    private string searchString1 = "";

    public string Message { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var a = await PatientService.GetAll();
            var b = await DoctorService.GetAll();
            if (a.Any() && b.Any())
                activateAddShift = true;
            else
                activateAddShift = false;

            shifts = await ShiftService.GetAll();
        }
        catch (Exception e)
        {

            Message = "Error... " + e.Message;
        }
    }

    private void NavigateToAddShift()
    {
        NavigationManager.NavigateTo("shift/create");
    }

    private void NavigateToDeleteShift(int shiftId)
    {
        NavigationManager.NavigateTo($"shift/delete/{shiftId}");
    }

    private void NavigateToEditShift(int shiftId)
    {
        NavigationManager.NavigateTo($"shift/edit/{shiftId}");
    }

    private bool FilterFunc1(Shift shiftFilter) => FilterFunc(shiftFilter, searchString1);

    private bool FilterFunc(Shift shiftFilter, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return false;
    }
}