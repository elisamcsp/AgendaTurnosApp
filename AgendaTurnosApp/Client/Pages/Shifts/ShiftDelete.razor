@page "/shift/delete/{id:int}"

@attribute [Authorize]

@inject IShiftService ShiftService
@inject IPatientService PacienteService
@inject IDoctorService DoctorService

@inject NavigationManager NavigationManager

<h3>Turno</h3>

@Message

@if (shift == null)
{
    <p>Cargando ....</p>
}
else
{

    <EditForm Model="shift" OnValidSubmit="Delete">
        <div class="card">
            <h5 class="card-header"> Datos del Turno </h5>
            <div class="card-body">
                <div class="container">

                    <div class="row">

                        <div class="col-md-6 mb-3">
                            <label for="">Turno</label>
                            <InputText class="form-control" readonly @bind-Value="shift.PatientFullName"></InputText>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label for="">Doctor</label>                            
                            <InputText class="form-control" readonly @bind-Value="shift.DoctorFullName"></InputText>
                        </div>

                    </div>
                    <div class="row">

                        <div class="col-md-6 mb-3">
                            <label for="">Fecha Turno</label>
                            <InputDate class="form-control" readonly @bind-Value="@shift.ShiftDate"></InputDate>
                        </div>

                    </div>

                    <div class="row">

                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-danger" value="Eliminar" />
                            <input type="button" class="btn btn-secondary" value="Cancelar" @onclick="NavigateHome" />
                        </div>
                        <div class="col-md-4 mb-3">
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </EditForm>

}

@code {
    public Shift shift = new Shift();

    public IEnumerable<Patient> patients = new List<Patient>();
    public IEnumerable<Doctor> doctors = new List<Doctor>();

    public string Message;

    [Parameter]
    public int id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            patients = await PacienteService.GetAll();
            doctors = await DoctorService.GetAll();

            shift = await ShiftService.GetDetails(id);
            shift.PatientFullName = patients.FirstOrDefault(p => p.Id == shift.PatientId).FullName;
            shift.DoctorFullName = doctors.FirstOrDefault(p => p.Id == shift.DoctorId).FullName;

        }
        catch (Exception)
        {
            throw;
        }
    }

    protected async Task ShowName(int id)
    {
        await ShiftService.DeleteShift(id);
        NavigateHome();
    }

    protected async Task Delete()
    {
        await ShiftService.DeleteShift(id);
        NavigateHome();
    }

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/shift/list");
    }

}
