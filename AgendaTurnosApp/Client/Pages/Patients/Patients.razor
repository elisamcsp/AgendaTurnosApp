@page "/patient/list"

@attribute [Authorize]
@inject IPatientService PatientService
@inject IDialogService DialogService

@inject NavigationManager NavigationManager

<MudButton OnClick="NavigateToAddPatient" Color="Color.Secondary"> + Añadir paciente</MudButton>

@Message

@if (patients != null && patients.Any())
{
<MudTable Items="@patients" Hover="true" Striped="true" 
          Breakpoint="Breakpoint.Sm" 
          Filter="new Func<Patient,bool>(FilterFunc1)" 
          @bind-SelectedItem="selectedPatient"
          SortLabel="Ordenar por">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Listado de Pacientes</MudText>
        <MudToolBarSpacer></MudToolBarSpacer>
        <MudTextField @bind-Value="searchString1" Placeholder="Buscar" FullWidth="false" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" ></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Patient, object>(x=>x.FullName)">Nombre</MudTableSortLabel> </MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Patient, object>(x=>x.DNI)">DNI</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Patient, object>(x=>x.BirthDate)">Fecha Nacimiento</MudTableSortLabel> </MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Patient, object>(x=>x.Phone)">Teléfono</MudTableSortLabel> </MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Patient, object>(x=>x.Address)">Dirección</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="PatientContext">
        <MudTd DataLabel="Name">@PatientContext.FullName</MudTd>
        <MudTd DataLabel="DNI">@PatientContext.DNI</MudTd>
        <MudTd DataLabel="BirthDate">@PatientContext.BirthDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Phone">@PatientContext.Phone</MudTd>
        <MudTd DataLabel="Address">@PatientContext.Address</MudTd>
        <MudTd>
            <MudIconButton OnClick="@(() => NavigateToEditPatient(PatientContext.Id))"
                           Icon="@Icons.Material.Filled.Edit" aria-label="edit"></MudIconButton>
            <MudIconButton OnClick="@(() => NavigateToDeletePatient(PatientContext.Id))"
                           Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>

        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
}
else
{
    <p>Cargando ....</p>
}

@code {
    public Patient patient = new Patient();
    public IEnumerable<Patient> patients ;

    private Patient selectedPatient = null;
    private HashSet<Patient> selectedItems = new HashSet<Patient>();

    private string searchString1 = "";

    public string Message { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {

            patients = await PatientService.GetAll();

        }
        catch (Exception e)
        {

            Message = "Error... " + e.Message;
        }
    }

    private async Task AddPatient()
    {
        var dialog = DialogService.Show<PatientDetails>("Datos del Paciente");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
                patient = (Patient) result.Data;
        }
    }

    private void NavigateToAddPatient()
    {
        NavigationManager.NavigateTo("/patient/create");
    }

    private void NavigateToDeletePatient(int patientId)
    {
        NavigationManager.NavigateTo($"patient/delete/{patientId}");
    }

    private void NavigateToEditPatient(int patientId)
    {
        NavigationManager.NavigateTo($"patient/edit/{patientId}");
    }

    private bool FilterFunc1(Patient patientFilter) => FilterFunc(patientFilter, searchString1);

    private bool FilterFunc(Patient patientFilter, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (patientFilter.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (patientFilter.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (patientFilter.DNI.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{patientFilter.Address} {patientFilter.BirthDate} {patientFilter.Phone}".Contains(searchString))
            return true;
        return false;
    }



}